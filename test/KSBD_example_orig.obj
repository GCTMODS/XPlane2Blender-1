A700								// file version, leave this alone.OBJ								// indicate this is an object file. leave this alone.KSBD_example					// texture. this texture is used for the entire object. use a different part of the texture for each part of the object if desired. this gives the highest frame-rate. X-Plane will automatically check for LIT texture for night lighting as well.ATTR_LOD 0 1000					// until further notice, all of this geometry is only visible if you are between the number meters specified at left from the objectATTR_poly_os 2					// offset the polyon by 1, which is another way to avoid z-fightingquad							// pavement. 4 verts. this will sit on the ground without z-buffering problems, thanks to the ATTR no_depth being called 20.0  0.0  20.0    0.75 0.88-20.0  0.0  20.0    0.94 0.88-20.0  0.0 -20.0    0.94 0.50 20.0  0.0 -20.0    0.75 0.50ATTR_poly_os 0					// return to default (0) polygon OSATTR_shade_smooth				// use smooth shading until i say otherwisequad_strip 18					// quad strip. 18 verts. xyz st. concrete foundation sides. (verts may be all in a line or paired as I have done)-16.0   0.0  14.0	0.50 0.00		-12.0  10.0  10.0	0.50 0.50-14.0   0.0  16.0	1.00 0.00		-10.0  10.0  12.0	1.00 0.50 14.0   0.0  16.0	0.50 0.00		 10.0  10.0  12.0	0.50 0.50 16.0   0.0  14.0	1.00 0.00		 12.0  10.0  10.0	1.00 0.50 16.0   0.0 -14.0	0.50 0.00		 12.0  10.0 -10.0	0.50 0.50 14.0   0.0 -16.0	1.00 0.00		 10.0  10.0 -12.0	1.00 0.50-14.0   0.0 -16.0	0.50 0.00		-10.0  10.0 -12.0	0.50 0.50-16.0   0.0 -14.0	1.00 0.00		-12.0  10.0 -10.0	1.00 0.50-16.0   0.0  14.0	0.50 0.00		-12.0  10.0  10.0	0.50 0.50ATTR_shade_flat					// ok i said otherwise. return to flat shading.polygon 8						// polygon. 8 verts. xyz st. concrete foundation top. (this polygon should all be in one plane... there will only be one normal vector computed for it!)-10.0  10.0 -12.0	0.60 0.00 10.0  10.0 -12.0	0.90 0.00 12.0  10.0 -10.0	1.00 0.10 12.0  10.0  10.0	1.00 0.40 10.0  10.0  12.0	0.90 0.50-10.0  10.0  12.0	0.60 0.50-12.0  10.0  10.0	0.50 0.40-12.0  10.0 -10.0	0.50 0.10quad							// quad. xyz st. building side. (this polygon should all be in one plane... there will only be one normal vector computed for it!) 10.0  30.0  -10.0	0.0 1.0 10.0  10.0  -10.0	0.0 0.0 10.0  10.0   10.0	0.5 0.0 10.0  30.0   10.0	0.5 1.0quad							// quad. xyz st. building side. (this polygon should all be in one plane... there will only be one normal vector computed for it!) 10.0  30.0   10.0	0.0 1.0 10.0  10.0   10.0	0.0 0.0-10.0  10.0   10.0	0.5 0.0-10.0  30.0   10.0	0.5 1.0quad							// quad. xyz st. building side. (this polygon should all be in one plane... there will only be one normal vector computed for it!)-10.0  30.0   10.0	0.0 1.0-10.0  10.0   10.0	0.0 0.0-10.0  10.0  -10.0	0.5 0.0-10.0  30.0  -10.0	0.5 1.0quad							// quad. xyz st. building side. (this polygon should all be in one plane... there will only be one normal vector computed for it!)-10.0  30.0  -10.0	0.0 1.0-10.0  10.0  -10.0	0.0 0.0 10.0  10.0  -10.0	0.5 0.0 10.0  30.0  -10.0	0.5 1.0tri_fan 6						// triangle fan. 6 verts. xyz st. slanted part of roof.  0.0  35.0   0.0   0.87 0.75 10.0  30.0 -10.0   0.94 0.88 10.0  30.0  10.0   0.94 0.50-10.0  30.0  10.0   0.75 0.50-10.0  30.0 -10.0   0.75 0.88 10.0  30.0 -10.0   0.94 0.88smoke_white		 0.0  35.0  0.0 2.0		// a point from which black smoke is emitted... there should be 4 numbers following a smoke point: x, y, z, and smoke puff siz			// x, y, z, puff sizequad_strip 10					// quad strip. 10 verts. xyz st. girders on roof sides. (verts may be all in a line or paired as I have done)-8.0  30.0  8.0    0.75 0.50		-8.0  40.0  8.0    0.75 1.0 8.0  30.0  8.0    0.50 0.50		 8.0  40.0  8.0    0.50 1.0 8.0  30.0 -8.0    0.75 0.50		 8.0  40.0 -8.0    0.75 1.0-8.0  30.0 -8.0    0.50 0.50		-8.0  40.0 -8.0    0.50 1.0-8.0  30.0  8.0    0.75 0.50		-8.0  40.0  8.0    0.75 1.0quad_strip 10					// quad strip. 10 verts. xyz st. girders on roof sides, seen from other side. (verts may be all in a line or paired as I have done)-8.0  30.0  8.0    0.75 0.50		-8.0  40.0  8.0    0.75 1.0-8.0  30.0 -8.0    0.50 0.50		-8.0  40.0 -8.0    0.50 1.0 8.0  30.0 -8.0    0.75 0.50		 8.0  40.0 -8.0    0.75 1.0 8.0  30.0  8.0    0.50 0.50		 8.0  40.0  8.0    0.50 1.0-8.0  30.0  8.0    0.75 0.50		-8.0  40.0  8.0    0.75 1.0quad_hard						// quad. xyz st. girder roof. (this polygon should all be in one plane... there will only be one normal vector computed for it!) 8.0  40.0  8.0    0.75 1.00-8.0  40.0  8.0    0.50 1.00-8.0  40.0 -8.0    0.50 0.50 8.0  40.0 -8.0    0.75 0.50quad_hard						// quad. xyz st. girder roof, seen from other sdide. (this polygon should all be in one plane... there will only be one normal vector computed for it!) 8.0  40.0 -8.0    0.75 0.50-8.0  40.0 -8.0    0.50 0.50-8.0  40.0  8.0    0.50 1.00 8.0  40.0  8.0    0.75 1.00line							// antenna on roof, 5 5 5 is red/green/blue color of line, each on a scale of 0 to 10.-6.0  40.0 -6.0    5 5 5-6.0  60.0 -6.0    5 5 5line							// antenna on roof, 5 5 5 is red/green/blue color of line, each on a scale of 0 to 10. 6.0  40.0 -6.0    5 5 5 6.0  60.0 -6.0    5 5 5line							// antenna on roof, 5 5 5 is red/green/blue color of line, each on a scale of 0 to 10.-6.0  40.0  6.0    5 5 5-6.0  60.0  6.0    5 5 5line							// antenna on roof, 5 5 5 is red/green/blue color of line, each on a scale of 0 to 10. 6.0  40.0  6.0    5 5 5 6.0  60.0  6.0    5 5 5light							// light on roof, 10 1 1 is red/green/blue color of light, each on a scale of 0 to 10. (99 99 99 indicates a pulsing red light)-6.0  60.0 -6.0   10 1 1light							// light on roof, 10 1 1 is red/green/blue color of light, each on a scale of 0 to 10. (98 98 98 indicates a strobe light) 6.0  60.0 -6.0   10 1 1light							// light on roof, 10 1 1 is red/green/blue color of light, each on a scale of 0 to 10. (97 97 97 indicates a traffic light, complete with changing colors!)-6.0  60.0  6.0   10 1 1light							// light on roof, 10 1 1 is red/green/blue color of light, each on a scale of 0 to 10. (negative numbers indicate a flashing light) 6.0  60.0  6.0   10 1 1ATTR_LOD 1000 5000				// LOWER LEVEL OF DETAIL FOR DISTANT VIEWING: until further notice, all of this geometry is only visible if you are between the number meters specified at left from the objectquad_strip 18					// quad strip. 18 verts. xyz st. concrete foundation sides. (verts may be all in a line or paired as I have done)-16.0   0.0  14.0	0.5 0.0		-12.0  10.0  10.0	0.50 0.50-14.0   0.0  16.0	1.0 0.0		-10.0  10.0  12.0	1.00 0.50 14.0   0.0  16.0	0.5 0.0		 10.0  10.0  12.0	0.50 0.50 16.0   0.0  14.0	1.0 0.0		 12.0  10.0  10.0	1.00 0.50 16.0   0.0 -14.0	0.5 0.0		 12.0  10.0 -10.0	0.50 0.50 14.0   0.0 -16.0	1.0 0.0		 10.0  10.0 -12.0	1.00 0.50-14.0   0.0 -16.0	0.5 0.0		-10.0  10.0 -12.0	0.50 0.50-16.0   0.0 -14.0	1.0 0.0		-12.0  10.0 -10.0	1.00 0.50-16.0   0.0  14.0	0.5 0.0		-12.0  10.0  10.0	0.50 0.50quad							// quad. xyz st. building side. (this polygon should all be in one plane... there will only be one normal vector computed for it!) 10.0  30.0  -10.0	0.0 1.0 10.0  10.0  -10.0	0.0 0.0 10.0  10.0   10.0	0.5 0.0 10.0  30.0   10.0	0.5 1.0quad							// quad. xyz st. building side. (this polygon should all be in one plane... there will only be one normal vector computed for it!) 10.0  30.0   10.0	0.0 1.0 10.0  10.0   10.0	0.0 0.0-10.0  10.0   10.0	0.5 0.0-10.0  30.0   10.0	0.5 1.0quad							// quad. xyz st. building side. (this polygon should all be in one plane... there will only be one normal vector computed for it!)-10.0  30.0   10.0	0.0 1.0-10.0  10.0   10.0	0.0 0.0-10.0  10.0  -10.0	0.5 0.0-10.0  30.0  -10.0	0.5 1.0quad							// quad. xyz st. building side. (this polygon should all be in one plane... there will only be one normal vector computed for it!)-10.0  30.0  -10.0	0.0 1.0-10.0  10.0  -10.0	0.0 0.0 10.0  10.0  -10.0	0.5 0.0 10.0  30.0  -10.0	0.5 1.0tri_fan 6						// triangle fan. 6 verts. xyz st. slanted part of roof.  0.0  35.0   0.0   0.87 0.75 10.0  30.0 -10.0   0.94 0.88 10.0  30.0  10.0   0.94 0.50-10.0  30.0  10.0   0.75 0.50-10.0  30.0 -10.0   0.75 0.88 10.0  30.0 -10.0   0.94 0.88end								// end the objectNow that we have gotten to the "end" indicator, X-Plane will ignore everything else in the file... which means we can talk right here!Here is a total list of ALL the available primitive types:light							// a single light that comes on at nightline							// a single linetri								// a trianglequad							// a quadquad_hard						// a quad that you can land on... it is "hard" to airplanes and helosquad_movie						// this quad is a drive-in movie quad, showing apple advertisements at nightquad_strip						// s-poly strip, no limit on number of verticestri_strip						// tri-strip, no limit on number of verticestri_fan							// tri-fan, no limit on number of verticespolygon							// n-sided polygon, no limit on number of verticessmoke_black       0 10 0 2		// a point from which black smoke is emitted... 4 numbers following a smoke point: x, y, z, and smoke puff sizesmoke_white	      0 10 0 2		// a point from which white smoke is emitted... 4 numbers following a smoke point: x, y, z, and smoke puff sizeATTR_shade_flat					// do flat-shading until further noticeATTR_shade_smooth				// do smooth-shading until further noticeATTR_ambient_rgb  1.0 0.0 0.0	// set this ambient  color until further notice (then follow this with r, g, b scaled 0.0 to 1.0 on the same line with no commas or other seperators. a comment after that is fine)ATTR_difuse_rgb   1.0 0.0 0.0	// set this diffuse  color until further notice (then follow this with r, g, b scaled 0.0 to 1.0 on the same line with no commas or other seperators. a comment after that is fine)ATTR_specular_rgb 1.0 0.0 0.0	// set this specular color until further notice (then follow this with r, g, b scaled 0.0 to 1.0 on the same line with no commas or other seperators. a comment after that is fine)ATTR_emission_rgb 1.0 0.0 0.0	// set this emission color until further notice (then follow this with r, g, b scaled 0.0 to 1.0 on the same line with no commas or other seperators. a comment after that is fine)ATTR_shiny_rat    1.0			// set this shininess until further notice (then follow this a shininess scaled 0.0 to 1.0 on the same line with no commas or other seperators. a comment after that is fine)ATTR_no_depth					// dont depth test. used for markings on pavement and stuffATTR_depth						// depth testATTR_poly_os 1					// polyon offset, for letting ramps sit ON TOP of terrain, and things like that. argument 0 is default (same level as the ground) 1 is raised up 1 level, 2 is raised up 2 levels, etc.ATTR_reset						// no paramters needed... this resets all the lighting and everything to default for the next stuff to be drawn in the future... this is a good idea if you have messed with liting and stuff abovefor light colors, enter any three numbers 0->10 for the r, g, b color of the lites.enter:99 99 99	// this is pulsing red... DO NOT OFFSET BASED ON THE OBJECT, BECAUSE AUTOGEN USES THE SAME OBJECT OVER AND OVER!98 98 98	// this is strobe... DO NOT OFFSET BASED ON THE OBJECT, BECAUSE AUTOGEN USES THE SAME OBJECT OVER AND OVER!97 97 97	// this is traffic light... DO NOT OFFSET BASED ON THE OBJECT, BECAUSE AUTOGEN USES THE SAME OBJECT OVER AND OVER!